// <auto-generated />
using System;
using JobPortal.JobPostingService.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace JobPortal.JobPostingService.Persistence.Migrations
{
    [DbContext(typeof(JobPostingDbContext))]
    [Migration("20250127055455_dbInit")]
    partial class dbInit
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BenefitJobPost", b =>
                {
                    b.Property<Guid>("BenefitsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("JobPostsId")
                        .HasColumnType("uuid");

                    b.HasKey("BenefitsId", "JobPostsId");

                    b.HasIndex("JobPostsId");

                    b.ToTable("BenefitJobPost");
                });

            modelBuilder.Entity("JobPortal.JobPostingService.Domain.Entities.Benefit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Benefits");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f1781e55-1a1e-4506-8462-e46f2602f0fa"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Özel Sağlık Sigortası"
                        },
                        new
                        {
                            Id = new Guid("846fe540-1e2a-410a-b96b-9125cef65d30"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Yemek Kartı"
                        },
                        new
                        {
                            Id = new Guid("7d461f4b-7433-4290-9739-62d2c7d0e1cc"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Servis"
                        },
                        new
                        {
                            Id = new Guid("92209f09-387a-49dc-be08-9c5e092b8f72"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Esnek Çalışma Saatleri"
                        },
                        new
                        {
                            Id = new Guid("6fd71369-623d-42ad-b1b7-bb7c0fb9807b"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Uzaktan Çalışma"
                        },
                        new
                        {
                            Id = new Guid("53c068c9-f42b-41e7-ba66-3042fa76d8ea"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Mazeret İzin"
                        },
                        new
                        {
                            Id = new Guid("97ac4390-ee4c-405c-9dfb-d0ceed7cddd0"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Eğitim Desteği"
                        });
                });

            modelBuilder.Entity("JobPortal.JobPostingService.Domain.Entities.JobPost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("EmployerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Location")
                        .HasColumnType("text");

                    b.Property<Guid?>("PositionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Requirements")
                        .HasColumnType("text");

                    b.Property<decimal?>("Salary")
                        .HasColumnType("numeric");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("WorkingMethodId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PositionId");

                    b.HasIndex("WorkingMethodId");

                    b.ToTable("JobPosts");
                });

            modelBuilder.Entity("JobPortal.JobPostingService.Domain.Entities.Position", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Positions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("81b645c8-f5a5-4568-a556-6364e6ec3b26"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Yazılım Geliştirici"
                        },
                        new
                        {
                            Id = new Guid("13ff991b-ccbc-4438-9892-0a33ca338950"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Kıdemli Yazılım Geliştirici"
                        },
                        new
                        {
                            Id = new Guid("d103c194-052a-4796-bd1b-81d70dc87101"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "İş Analisti"
                        },
                        new
                        {
                            Id = new Guid("d76aef2d-2666-4f0f-9ab8-29b3b64bc241"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Proje Yöneticisi"
                        },
                        new
                        {
                            Id = new Guid("b3357633-d0e4-4360-8cf6-322f3cc2a373"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "DevOps Mühendisi"
                        },
                        new
                        {
                            Id = new Guid("886fe6a0-41ee-4091-af37-b47f44bb93e4"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "UI/UX Tasarımcı"
                        },
                        new
                        {
                            Id = new Guid("26c5c218-8b8e-4c77-b2d3-0a4e3258ee15"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Test Mühendisi"
                        });
                });

            modelBuilder.Entity("JobPortal.JobPostingService.Domain.Entities.WorkingMethod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("WorkingMethods");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1da27eef-d85c-41cb-9a89-af5881f3a5c1"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Tam Zamanlı"
                        },
                        new
                        {
                            Id = new Guid("b47aef00-3343-4436-9d7f-d52683ce4cf6"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Yarı Zamanlı"
                        },
                        new
                        {
                            Id = new Guid("22636d32-03f2-45ff-9519-b8b164fc39b2"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Stajyer"
                        },
                        new
                        {
                            Id = new Guid("08a6ecee-2c9e-4939-b2ae-2cb1f8a27ac2"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Proje Bazlı"
                        });
                });

            modelBuilder.Entity("BenefitJobPost", b =>
                {
                    b.HasOne("JobPortal.JobPostingService.Domain.Entities.Benefit", null)
                        .WithMany()
                        .HasForeignKey("BenefitsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobPortal.JobPostingService.Domain.Entities.JobPost", null)
                        .WithMany()
                        .HasForeignKey("JobPostsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JobPortal.JobPostingService.Domain.Entities.JobPost", b =>
                {
                    b.HasOne("JobPortal.JobPostingService.Domain.Entities.Position", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId");

                    b.HasOne("JobPortal.JobPostingService.Domain.Entities.WorkingMethod", "WorkingMethod")
                        .WithMany()
                        .HasForeignKey("WorkingMethodId");

                    b.Navigation("Position");

                    b.Navigation("WorkingMethod");
                });
#pragma warning restore 612, 618
        }
    }
}
